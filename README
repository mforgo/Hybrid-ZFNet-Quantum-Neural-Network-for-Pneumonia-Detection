Here’s a complete README you can drop into the project root (README.md). It’s tailored to your current codebase, your “humble notebook” constraints, and the paper you’re writing.

***

# Hybrid Quantum–Classical Pneumonia Detection

A practical, student‑friendly research project that combines classical deep feature extraction with a compact quantum neural network for pneumonia detection from chest X‑rays. The project is in **development**

- Classical: ZFNet/AlexNet feature extraction and baselines
- Quantum: 4‑qubit, 2‑layer variational circuit (RX/RY/RZ + ring entanglement)
- Integration: Shared 4‑feature pipeline and fair benchmarking
- Hardware: Runs on a modest laptop; training completes in minutes in “humble mode”

## Table of Contents
- Project Goals
- Repository Structure
- Quick Start
- Workflows
  - Quantum Experiment (training)
  - Hybrid Integration (evaluation)
  - Classical Baseline
- Configuration (env variables)
- Results & Outputs
- Paper and Documentation
- Notes on Performance
- Roadmap
- License

***

## Project Goals

1. Build an accessible hybrid quantum–classical pipeline for medical image classification.
2. Evaluate quantum circuits fairly against classical baselines using the same features.
3. Produce a competition‑ready project (SOČ) and a publishable LaTeX paper.
4. Provide a reproducible, open, student‑friendly reference implementation.

***

## Repository Structure

```
pneumonia_qml/
├── data/
│   ├── chest_xray/              # raw dataset (optional, if available)
│   ├── features/                # extracted features & metadata.csv (optional)
│   ├── preprocessing.py         # classical preprocessing utilities
│   ├── ingestion.py             # dataset ingestion helpers
│   └── analysis.py              # data analysis helpers
├── models/
│   ├── quantum_experiment.py    # quantum training (reverted, fast & stable)
│   ├── hybrid_integration.py    # quantum–classical evaluation (aligned)
│   └── classical_baseline.py    # classical models (SVM/LogReg/MLP)
├── results/
│   ├── final_quantum_params.npy # saved quantum parameters (flat vector)
│   ├── quantum_experiment_results.json
│   └── hybrid_integration_results.json
├── media/
│   ├── quantum_training_results.png
│   └── hybrid_integration_results.png
├── docs/
│   ├── soc.tex / soc.pdf        # SOČ document (LaTeX + compiled)
│   ├── paper-readme.pdf         # paper project notes
│   └── quantum-medical-paper.tex# research paper template (if present)
├── main.py
├── environment.yml              # conda environment file (typo note below)
└── README.md
```

Note: If the file is named `enviroment.yml` in your repo, consider renaming to `environment.yml`.

***

## Quick Start

1) Create and activate the environment

```bash
conda env create -f environment.yml
conda activate quantum-pneumonia
```

2) Run the quantum experiment (fast, stable)

```bash
python models/quantum_experiment.py
```

This trains a compact 4‑qubit model in analytic mode and saves:
- parameters: results/final_quantum_params.npy
- metrics: results/quantum_experiment_results.json

3) Run the hybrid evaluation

```bash
python models/hybrid_integration.py
```

If a 4‑feature pipeline is available (data/features/metadata.csv), it uses it. Otherwise it falls back to a synthetic test set so you can evaluate end‑to‑end immediately.

4) Optional: classical baseline

```bash
python models/classical_baseline.py
```

***

## Workflows

### A) Quantum Experiment (Training)

- Default settings are designed for older laptops:
  - 4 qubits, 2 layers, analytic training (no shots), 40 iterations, ~20–60s
- Saves `final_quantum_params.npy` as a flat vector (length = LAYERS × QUBITS × 3)

Environment overrides:

```bash
# Speed up or improve fidelity
ITERS=80 NSAMPLES=600 python models/quantum_experiment.py
```

Key outputs:
- results/final_quantum_params.npy
- results/quantum_experiment_results.json

### B) Hybrid Integration (Evaluation)

- Loads `final_quantum_params.npy`
- Reshapes to (LAYERS, QUBITS, 3)
- Uses the same ansatz as the quantum experiment
- Evaluates quantum model and classical baseline on the same features
- If `data/features/metadata.csv` is missing, uses a synthetic test set

Run:

```bash
python models/hybrid_integration.py
```

Optional: evaluate quantum with shot noise (keeps training fast)

```bash
EVAL_SHOTS=256 python models/hybrid_integration.py
```

### C) Classical Baseline

- Trains standard models (LogReg/SVM/MLP) on the same 4 selected features
- Produces reference metrics for fair comparison

***

## Configuration (Environment Variables)

You can tune runs without editing code:

- Training
  - `QSEED` default 42
  - `LAYERS` number of variational layers (default 2)
  - `ITERS` iterations (default 40)
  - `NSAMPLES` synthetic dataset size (default 400)
  - `LR` learning rate (default 0.03)
  - `PATIENCE` early stopping patience (default 15)

Examples:

```bash
# Quick demo (~30–60s)
ITERS=40 NSAMPLES=400 python models/quantum_experiment.py

# Larger run
ITERS=120 NSAMPLES=800 LAYERS=2 python models/quantum_experiment.py
```

- Integration
  - `EVAL_SHOTS` shot count for evaluation only (e.g., 256)

```bash
EVAL_SHOTS=256 python models/hybrid_integration.py
```

***

## Results & Outputs

- Quantum training:
  - `results/quantum_experiment_results.json`
  - `results/final_quantum_params.npy`

- Hybrid evaluation:
  - `results/hybrid_integration_results.json`

- Media (optional plots):
  - `media/quantum_training_results.png`
  - `media/hybrid_integration_results.png`

***

## Paper and Documentation

- Research paper: see `docs/quantum-medical-paper.tex` (IEEE‑style LaTeX template).
- SOČ document: `docs/soc.tex` with compiled `docs/soc.pdf`.
- Paper project notes: `docs/paper-readme.pdf`.

When writing the Experiments section:
- Report quantum and classical metrics on the same 4 features (accuracy, macro‑F1, AUC).
- State whether evaluation used shots (EVAL_SHOTS) or analytic mode.
- Include training time and parameter count.

***

## Notes on Performance

- Analytic training is far faster on modest hardware. Use shots only for evaluation realism.
- If runs feel “stuck,” reduce:
  - `ITERS` (e.g., 40–60),
  - `NSAMPLES` (e.g., 300–400),
  - keep `LAYERS=2`.
- To avoid BLAS over‑subscription:
  - `OMP_NUM_THREADS=1 OPENBLAS_NUM_THREADS=1 MKL_NUM_THREADS=1` before Python.

***

## Roadmap

- Implement mutual information feature selection and data re‑uploading.
- Add a true two‑model ensemble (params_a.npy, params_b.npy) with averaging.
- Real hardware evaluation (IBM Quantum) with ZNE and readout mitigation.
- Extend to 8 qubits via circuit cutting for multi‑class tasks.
- Finalize paper (results + discussion) and SOČ submission package.

***

## License

Specify your preferred license (e.g., MIT, Apache‑2.0). If unsure, MIT is a good default for student research projects.

***

## Acknowledgments

Thanks to open‑source quantum and ML communities for tools enabling reproducible student research.
